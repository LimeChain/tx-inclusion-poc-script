/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ReceiptInclusionProver,
  ReceiptInclusionProverInterface,
} from "../ReceiptInclusionProver";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "oracleAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "bytes32",
                name: "parentHash",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "sha3Uncles",
                type: "bytes32",
              },
              {
                internalType: "address",
                name: "miner",
                type: "address",
              },
              {
                internalType: "bytes32",
                name: "stateRoot",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "transactionsRoot",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "receiptsRoot",
                type: "bytes32",
              },
              {
                internalType: "bytes",
                name: "logsBloom",
                type: "bytes",
              },
              {
                internalType: "uint256",
                name: "difficulty",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "number",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "gasLimit",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "gasUsed",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "timestamp",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "extraData",
                type: "bytes",
              },
              {
                internalType: "bytes32",
                name: "mixHash",
                type: "bytes32",
              },
              {
                internalType: "bytes",
                name: "nonce",
                type: "bytes",
              },
              {
                internalType: "uint256",
                name: "baseFeePerGas",
                type: "uint256",
              },
              {
                internalType: "bytes32",
                name: "withdrawalsRoot",
                type: "bytes32",
              },
            ],
            internalType: "struct BlockData",
            name: "blockData",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "status",
                type: "bool",
              },
              {
                internalType: "uint256",
                name: "cumulativeGasUsed",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "bitvector",
                type: "bytes",
              },
              {
                components: [
                  {
                    internalType: "address",
                    name: "logAddress",
                    type: "address",
                  },
                  {
                    internalType: "bytes32[]",
                    name: "topics",
                    type: "bytes32[]",
                  },
                  {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                  },
                ],
                internalType: "struct Log[]",
                name: "logs",
                type: "tuple[]",
              },
            ],
            internalType: "struct Receipt",
            name: "txReceipt",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "blockNumber",
            type: "uint256",
          },
          {
            internalType: "bytes32[]",
            name: "receiptProofBranch",
            type: "bytes32[]",
          },
        ],
        internalType: "struct ProverDto",
        name: "data",
        type: "tuple",
      },
    ],
    name: "proveReceiptInclusion",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516114f83803806114f883398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b611465806100936000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80631232ffbe14610030575b600080fd5b61004361003e366004610ea1565b610057565b604051901515815260200160405180910390f35b60208101515160009061006c57506000919050565b81516100779061013b565b6000546040808501519051637741562f60e11b81526001600160a01b039092169163ee82ac5e916100ae9160040190815260200190565b602060405180830381865afa1580156100cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100ef9190611078565b146100fc57506000919050565b600061010b8360200151610371565b90506101248360600151846000015160a00151836103ea565b156101325750600092915050565b50600192915050565b60006101536040518060200160405280606081525090565b60006101cf6000856000015186602001518760400151886060015189608001518a60a001516040516020016101b99695949392919095865260208601949094526001600160a01b039290921660408501526060840152608083015260a082015260c00190565b60408051601f1981840301815291905290610400565b90506101db8282610479565b5060006101eb8560c0015161054c565b90506101f78382610479565b5060e08501516101008601516101208701516101408801516101608901516040805160208101969096528501939093526060840191909152608083015260a082015260009061024a90829060c0016101b9565b90506102568482610479565b50600061026787610180015161054c565b90506102738582610479565b5061029b6102946000896101a001516040516020016101b991815260200190565b8690610479565b5060006102ac886101c0015161054c565b90506102b88682610479565b506102ee6102e760008a6101e001518b61020001516040516020016101b9929190918252602082015260400190565b8790610479565b5060006102fe87600001516105a1565b905061032c6040518060400160405280600b81526020016a0212627a1a5a420a9a41d160ad1b8152506105d7565b61034d6040518060800160405280604281526020016113ee604291396105d7565b61035d818051906020012061061d565b805160209091012098975050505050505050565b600080826000015183602001518460400151856060015160405160200161039b94939291906110e1565b60408051808303601f1901815282820182526000808452602093840152815180830190925280518252828101928201929092529091506103da81610662565b8051906020012092505050919050565b6000826103f785846106e1565b14949350505050565b815160408051602081019091526060808252919060006104218560206111dc565b90505b82811161044c578581015161044261043b8261072e565b8490610479565b5050602001610424565b50805160405161045f91906020016111ef565b604051602081830303815290604052925050505b92915050565b60408051602081019091526060815281511561054557601f1983518051808551016605c284b9def779848401518181061582820402905080831061051857856020848317018201168160400186016040511461050657602060405101816040018101604052808b528760208701165b87810151828201528801806104e85750908302818801529450610518565b80604001860160405280830287870152505b505085519183019160200184165b8681015183820152840180610526575060008382016020015290915250505b5090919050565b60606105646040518060200160405280606081525090565b6105776105708461073c565b8290610479565b50805160405161058a91906020016111ef565b604051602081830303815290604052915050919050565b60606105af825160c06107ab565b826040516020016105c192919061120b565b6040516020818303038152906040529050919050565b61061a816040516024016105eb919061123a565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b17905261095a565b50565b61061a8160405160240161063391815260200190565b60408051601f198184030181529190526020810180516001600160e01b03166327b7cf8560e01b17905261095a565b60606000826000015167ffffffffffffffff81111561068357610683610b65565b6040519080825280601f01601f1916602001820160405280156106ad576020820181803683370190505b50905080516000036106bf5792915050565b60008160200190506106da846020015182866000015161097b565b5092915050565b600081815b845181101561072657610712828683815181106107055761070561124d565b60200260200101516109fe565b91508061071e81611263565b9150506106e6565b509392505050565b606061047361073c83610a2d565b6060808251600114801561076a57506080836000815181106107605761076061124d565b016020015160f81c105b15610776575081610473565b610782835160806107ab565b8360405160200161079492919061120b565b604051602081830303815290604052905092915050565b606080603884101561081257604080516001808252818301909252906020820181803683370190505090506107e0838561127c565b60f81b816000815181106107f6576107f661124d565b60200101906001600160f81b031916908160001a905350610953565b600060015b61082181876112ab565b15610847578161083081611263565b92506108409050610100826112bf565b9050610817565b6108528260016111dc565b67ffffffffffffffff81111561086a5761086a610b65565b6040519080825280601f01601f191660200182016040528015610894576020820181803683370190505b5092506108a1858361127c565b6108ac90603761127c565b60f81b836000815181106108c2576108c261124d565b60200101906001600160f81b031916908160001a905350600190505b818111610950576101006108f282846112d6565b6108fe906101006113cd565b61090890886112ab565b61091291906113d9565b60f81b8382815181106109275761092761124d565b60200101906001600160f81b031916908160001a9053508061094881611263565b9150506108de565b50505b9392505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b8060000361098857505050565b602081106109c0578251825261099f6020846111dc565b92506109ac6020836111dc565b91506109b96020826112d6565b9050610988565b80156109f957600060016109d58360206112d6565b6109e1906101006113cd565b6109eb91906112d6565b845184518216911916178352505b505050565b6000818310610a1a576000828152602084905260409020610953565b6000838152602083905260409020610953565b6060600082604051602001610a4491815260200190565b604051602081830303815290604052905060005b6020811015610a9b57818181518110610a7357610a7361124d565b01602001516001600160f81b031916600003610a9b5780610a9381611263565b915050610a58565b6000610aa88260206112d6565b67ffffffffffffffff811115610ac057610ac0610b65565b6040519080825280601f01601f191660200182016040528015610aea576020820181803683370190505b50905060005b8151811015610b5c578383610b0481611263565b945081518110610b1657610b1661124d565b602001015160f81c60f81b828281518110610b3357610b3361124d565b60200101906001600160f81b031916908160001a90535080610b5481611263565b915050610af0565b50949350505050565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715610b9e57610b9e610b65565b60405290565b6040516060810167ffffffffffffffff81118282101715610b9e57610b9e610b65565b604051610220810167ffffffffffffffff81118282101715610b9e57610b9e610b65565b604051601f8201601f1916810167ffffffffffffffff81118282101715610c1457610c14610b65565b604052919050565b80356001600160a01b0381168114610c3357600080fd5b919050565b600082601f830112610c4957600080fd5b813567ffffffffffffffff811115610c6357610c63610b65565b610c76601f8201601f1916602001610beb565b818152846020838601011115610c8b57600080fd5b816020850160208301376000918101602001919091529392505050565b600067ffffffffffffffff821115610cc257610cc2610b65565b5060051b60200190565b600082601f830112610cdd57600080fd5b81356020610cf2610ced83610ca8565b610beb565b82815260059290921b84018101918181019086841115610d1157600080fd5b8286015b84811015610d2c5780358352918301918301610d15565b509695505050505050565b600060808284031215610d4957600080fd5b610d51610b7b565b905081358015158114610d6357600080fd5b81526020828101358183015260408084013567ffffffffffffffff80821115610d8b57600080fd5b610d9787838801610c38565b83860152606091508186013581811115610db057600080fd5b8601601f81018813610dc157600080fd5b8035610dcf610ced82610ca8565b81815260059190911b8201860190868101908a831115610dee57600080fd5b8784015b83811015610e8d57803586811115610e0a5760008081fd5b8501808d03601f1901881315610e205760008081fd5b610e28610ba4565b610e338b8301610c1c565b81528982013588811115610e475760008081fd5b610e558f8d83860101610ccc565b8c830152508882013588811115610e6c5760008081fd5b610e7a8f8d83860101610c38565b828c015250845250918801918801610df2565b5080868a0152505050505050505092915050565b600060208284031215610eb357600080fd5b813567ffffffffffffffff80821115610ecb57600080fd5b9083019060808286031215610edf57600080fd5b610ee7610b7b565b823582811115610ef657600080fd5b83016102208188031215610f0957600080fd5b610f11610bc7565b8135815260208201356020820152610f2b60408301610c1c565b6040820152606082013560608201526080820135608082015260a082013560a082015260c082013584811115610f6057600080fd5b610f6c89828501610c38565b60c08301525060e0828101359082015261010080830135908201526101208083013590820152610140808301359082015261016080830135908201526101808083013585811115610fbc57600080fd5b610fc88a828601610c38565b8284015250506101a08083013581830152506101c08083013585811115610fee57600080fd5b610ffa8a828601610c38565b8284015250506101e0808301358183015250610200808301358183015250808352505060208301358281111561102f57600080fd5b61103b87828601610d37565b6020830152506040830135604082015260608301358281111561105d57600080fd5b61106987828601610ccc565b60608301525095945050505050565b60006020828403121561108a57600080fd5b5051919050565b60005b838110156110ac578181015183820152602001611094565b50506000910152565b600081518084526110cd816020860160208601611091565b601f01601f19169290920160200192915050565b6000608086151583526020868185015260408281860152611104838601886110b5565b6060868203818801528188518084528584019150858160051b850101868b016000805b848110156111b157878403601f19018652825180516001600160a01b031685528a8101518b86018990528051898701819052908c019084908e8801905b808310156111845783518252928e019260019290920191908e0190611164565b50928c0151878403888e01529261119b81856110b5565b998e019997505050938b01935050600101611127565b50919f9e505050505050505050505050505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610473576104736111c6565b60008251611201818460208701611091565b9190910192915050565b6000835161121d818460208801611091565b835190830190611231818360208801611091565b01949350505050565b60208152600061095360208301846110b5565b634e487b7160e01b600052603260045260246000fd5b600060018201611275576112756111c6565b5060010190565b60ff8181168382160190811115610473576104736111c6565b634e487b7160e01b600052601260045260246000fd5b6000826112ba576112ba611295565b500490565b8082028115828204841417610473576104736111c6565b81810381811115610473576104736111c6565b600181815b8085111561132457816000190482111561130a5761130a6111c6565b8085161561131757918102915b93841c93908002906112ee565b509250929050565b60008261133b57506001610473565b8161134857506000610473565b816001811461135e576002811461136857611384565b6001915050610473565b60ff841115611379576113796111c6565b50506001821b610473565b5060208310610133831016604e8410600b84101617156113a7575081810a610473565b6113b183836112e9565b80600019048211156113c5576113c56111c6565b029392505050565b6000610953838361132c565b6000826113e8576113e8611295565b50069056fe307833663066633934353138376333643764333161343564326262656265646564353436616161383830616235386332616661383562373436383265613365643838a26469706673582212203ccc117e8ed1ae50f8173a6549a49f2df00bdc8130133f1bdb4e9ce4b55685ca64736f6c63430008140033";

type ReceiptInclusionProverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ReceiptInclusionProverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ReceiptInclusionProver__factory extends ContractFactory {
  constructor(...args: ReceiptInclusionProverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    oracleAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ReceiptInclusionProver> {
    return super.deploy(
      oracleAddress,
      overrides || {}
    ) as Promise<ReceiptInclusionProver>;
  }
  override getDeployTransaction(
    oracleAddress: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(oracleAddress, overrides || {});
  }
  override attach(address: string): ReceiptInclusionProver {
    return super.attach(address) as ReceiptInclusionProver;
  }
  override connect(signer: Signer): ReceiptInclusionProver__factory {
    return super.connect(signer) as ReceiptInclusionProver__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReceiptInclusionProverInterface {
    return new utils.Interface(_abi) as ReceiptInclusionProverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ReceiptInclusionProver {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ReceiptInclusionProver;
  }
}
