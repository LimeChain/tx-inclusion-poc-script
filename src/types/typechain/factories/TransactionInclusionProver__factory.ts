/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TransactionInclusionProver,
  TransactionInclusionProverInterface,
} from "../TransactionInclusionProver";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "blockhashStorageAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "bytes32",
                name: "parentHash",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "sha3Uncles",
                type: "bytes32",
              },
              {
                internalType: "address",
                name: "miner",
                type: "address",
              },
              {
                internalType: "bytes32",
                name: "stateRoot",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "transactionsRoot",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "receiptsRoot",
                type: "bytes32",
              },
              {
                internalType: "bytes",
                name: "logsBloom",
                type: "bytes",
              },
              {
                internalType: "uint256",
                name: "difficulty",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "number",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "gasLimit",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "gasUsed",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "timestamp",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "extraData",
                type: "bytes",
              },
              {
                internalType: "bytes32",
                name: "mixHash",
                type: "bytes32",
              },
              {
                internalType: "bytes",
                name: "nonce",
                type: "bytes",
              },
              {
                internalType: "uint256",
                name: "baseFeePerGas",
                type: "uint256",
              },
              {
                internalType: "bytes32",
                name: "withdrawalsRoot",
                type: "bytes32",
              },
            ],
            internalType: "struct BlockData",
            name: "blockData",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "status",
                type: "bool",
              },
              {
                internalType: "uint256",
                name: "cumulativeGasUsed",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "logsBloom",
                type: "bytes",
              },
              {
                components: [
                  {
                    internalType: "address",
                    name: "logAddress",
                    type: "address",
                  },
                  {
                    internalType: "bytes32[]",
                    name: "topics",
                    type: "bytes32[]",
                  },
                  {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                  },
                ],
                internalType: "struct Log[]",
                name: "logs",
                type: "tuple[]",
              },
            ],
            internalType: "struct Receipt",
            name: "txReceipt",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "blockNumber",
            type: "uint256",
          },
          {
            internalType: "bytes32[]",
            name: "receiptProofBranch",
            type: "bytes32[]",
          },
        ],
        internalType: "struct ProverDto",
        name: "data",
        type: "tuple",
      },
    ],
    name: "proveTransactionInclusion",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "";

type TransactionInclusionProverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TransactionInclusionProverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TransactionInclusionProver__factory extends ContractFactory {
  constructor(...args: TransactionInclusionProverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    blockhashStorageAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<TransactionInclusionProver> {
    return super.deploy(
      blockhashStorageAddress,
      overrides || {}
    ) as Promise<TransactionInclusionProver>;
  }
  override getDeployTransaction(
    blockhashStorageAddress: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(blockhashStorageAddress, overrides || {});
  }
  override attach(address: string): TransactionInclusionProver {
    return super.attach(address) as TransactionInclusionProver;
  }
  override connect(signer: Signer): TransactionInclusionProver__factory {
    return super.connect(signer) as TransactionInclusionProver__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TransactionInclusionProverInterface {
    return new utils.Interface(_abi) as TransactionInclusionProverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TransactionInclusionProver {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TransactionInclusionProver;
  }
}
